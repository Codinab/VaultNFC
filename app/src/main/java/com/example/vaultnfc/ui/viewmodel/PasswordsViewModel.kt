import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.vaultnfc.data.repository.PasswordsRepository
import com.example.vaultnfc.data.repository.FolderRepository
import com.example.vaultnfc.model.Folder
import com.example.vaultnfc.model.PasswordItem
import kotlinx.coroutines.launch
import java.security.SecureRandom
import java.util.Base64
import javax.crypto.Cipher
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.PBEKeySpec
import javax.crypto.spec.SecretKeySpec

class PasswordsViewModel : ViewModel() {
    private val _passwordsList = MutableLiveData<List<PasswordItem>>()
    val passwordsList: LiveData<List<PasswordItem>> = _passwordsList

    private val passwordsRepository = PasswordsRepository()
    private val folderRepository = FolderRepository()

    private val _foldersList = MutableLiveData<List<Folder>>()
    val foldersList: LiveData<List<Folder>> = _foldersList



    init {
        //addTestFolders()
        fetchPasswords()
        fetchFolders()
    }

    fun addTestFolders() {
        viewModelScope.launch {
            try {
                folderRepository.addFolder(Folder(name = "Personal"))
                folderRepository.addFolder(Folder(name = "Work"))
                Log.d("PasswordsViewModel", "Test folders added successfully")
            } catch (e: Exception) {
                Log.e("PasswordsViewModel", "Error adding test folders", e)
            }
        }
    }

    fun fetch() {
        fetchPasswords()
        fetchFolders()
    }


    private fun fetchFolders() {
        viewModelScope.launch {
            try {
                val fetchedFolders = folderRepository.getAllFolders()
                _foldersList.value = fetchedFolders
                Log.d("FetchFolders", "Started")
                _foldersList.value?.forEach { folder ->
                    Log.d("FetchFolders", "Folder: ${folder.name}")
                }
                Log.d("FetchFolders", "Ended")
            } catch (e: Exception) {
                Log.e("PasswordsViewModel", "Error fetching folders", e)
            }
        }
    }
    private fun fetchPasswords() {
        viewModelScope.launch {
            try {
                val fetchedPasswords = passwordsRepository.getAllPasswords()
                _passwordsList.value = fetchedPasswords
                Log.d("PasswordsViewModel", "Updating passwords")
            } catch (e: Exception) {
                Log.e("PasswordsViewModel", "Error fetching passwords", e)
            }
        }
    }

    fun addPassword(
        title: String,
        username: String,
        rawPassword: String,
        uri: String,
        notes: String,
    ) {
        viewModelScope.launch {
            try {
                // Encrypt the password before storing it
                val encryptedPassword = encryptPassword(rawPassword, "Test")
                val encryptionIV = generateEncryptionIV() // Your method to generate an IV
                val passwordItem = PasswordItem(
                    id = "", // ID should be generated by Firebase
                    title = title,
                    username = username,
                    encryptedPassword = encryptedPassword,
                    uri = uri,
                    notes = notes,
                    encryptionIV = encryptionIV
                )
                passwordsRepository.addPassword(passwordItem)
                // After adding, fetch the latest list to update the local list
                fetchPasswords()
                fetchFolders()
            } catch (e: Exception) {
                // Handle exceptions
            }
        }
    }

    // SecureRandom for IV generation
    private val secureRandom = SecureRandom()

    fun encryptPassword(data: String, password: String): String {
        val salt = ByteArray(16) // Generate a new salt for each encryption
        secureRandom.nextBytes(salt)
        val key = deriveKeyFromPassword(password, salt)
        val cipher = Cipher.getInstance("AES/CTR/NoPadding")
        val ivBytes = ByteArray(16) // Initialization Vector
        secureRandom.nextBytes(ivBytes)
        val ivSpec = IvParameterSpec(ivBytes)
        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)
        val encryptedData = cipher.doFinal(data.toByteArray(Charsets.UTF_8))
        // Concatenate salt, IV, and encrypted data for transmission
        return Base64.getEncoder().encodeToString(salt + ivBytes + encryptedData)
    }

    fun decryptPassword(encrypted: String, password: String): String {
        val decoded = Base64.getDecoder().decode(encrypted)
        val salt = decoded.copyOfRange(0, 16)
        val iv = decoded.copyOfRange(16, 32)
        val encryptedData = decoded.copyOfRange(32, decoded.size)
        val key = deriveKeyFromPassword(password, salt)
        val cipher = Cipher.getInstance("AES/CTR/NoPadding")
        val ivSpec = IvParameterSpec(iv)
        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec)
        val decryptedData = cipher.doFinal(encryptedData)
        return String(decryptedData, Charsets.UTF_8)
    }

    fun deriveKeyFromPassword(password: String, salt: ByteArray): SecretKeySpec {
        val factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256")
        val spec = PBEKeySpec(password.toCharArray(), salt, 65536, 256)
        return SecretKeySpec(factory.generateSecret(spec).encoded, "AES")
    }


    // Placeholder for your method to generate an IV
    private fun generateEncryptionIV(): String {
        // Implement IV generation logic here
        return "IV" // Return the generated IV
    }

    fun removePassword(passwordItem: PasswordItem) {
        viewModelScope.launch {
            try {
                passwordsRepository.removePassword(passwordItem.id)
                // Refresh the list after removal
                fetchPasswords()
                fetchFolders()


                Log.d("PasswordsViewModel", "Removed password: ${passwordItem.title}")
            } catch (e: Exception) {
                Log.e("PasswordsViewModel", "Error removing password", e)
            }
        }
    }


}
